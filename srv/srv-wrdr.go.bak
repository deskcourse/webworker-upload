package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"path"
	"runtime"
	"strconv"
	"time"
)

func manualGC() {
	for {
		time.Sleep(time.Minute)
		runtime.GC()
	}
}

/* we dont need to make this optimization yet
fpMap := make(map[string]*File)
func getFilePtr(string n)  *File, Error {
    fp := nil
    if fp, ok := fpMap[n]; !ok {
	    fp, err := os.OpenFile(fpath, os.O_CREATE|os.O_RDWR, 0777)
	    if err != nil {
		    return nil, err
	    }
        fpMap[n] = fp
    }
    return fp, nil
}
*/

func uploadFileChunkSrvr(w http.ResponseWriter, req *http.Request) {

	/*
		file, handler, err := req.FormFile("fileseg")
		if err != nil {
			fmt.Println(err)
			http.Error(w, "Form file element not found", 502)
			return
		}
	*/

	fname := req.Header.Get("X-File-Name")
	if fname == "" {
		fmt.Println("X-File-Name not found in headers")
		http.Error(w, "X-File-Name not found in headers", 502)
		return
	}
	offset := req.Header.Get("X-File-Offset")
	if offset == "" {
		fmt.Println("X-File-Offset not found in headers")
		http.Error(w, "X-File-Offset not found in headers", 502)
		return
	}
	noffset, err := strconv.ParseInt(offset, 10, 64)
	if err != nil {
		fmt.Println(err)
		http.Error(w, "X-File-Offset invalid:"+offset, 502)
		return
	}

	/*
		dlen := req.Header.Get("X-File-Data-Length")
		if dlen == "" {
			fmt.Println("X-File-Data-Length not found in headers")
			http.Error(w, "X-File-Data-Length not found in headers", 502)
			return
		}
		ndlen, err := strconv.ParseUint(dlen, 10, 64)
		if err != nil {
			fmt.Println(err)
			http.Error(w, "X-File-Data-Length invalid:"+dlen, 502)
			return
		}
	*/

	data, err := ioutil.ReadAll(req.Body)
	if err != nil {
		fmt.Println(err)
		http.Error(w, "Could not read file data", 502)
		return
	}
	fpath := path.Join("/tmp", "chunked-"+fname)
	f, err := os.OpenFile(fpath, os.O_CREATE|os.O_RDWR, 0777)
	if err != nil {
		fmt.Println(err)
		http.Error(w, "Could not open file", 502)
		return
	}
	defer f.Close()
	_, errx := f.WriteAt(data, noffset)
	if errx != nil {
		fmt.Println(err)
		http.Error(w, "Could not write to file", 502)
		return
	}
	w.WriteHeader(200)

}
func uploadSrvr(w http.ResponseWriter, req *http.Request) {
	file, handler, err := req.FormFile("file")
	if err != nil {
		fmt.Println(err)
	}
	data, err := ioutil.ReadAll(file)
	if err != nil {
		fmt.Println(err)
	}
	err = ioutil.WriteFile("/tmp/"+handler.Filename, data, 0777)
	if err != nil {
		fmt.Println(err)
	}
	http.Redirect(w, req, "/wrdr/freader.html", http.StatusFound)
}

func main() {
	/*err := http.ListenAndServe(":8081", http.FileServer(http.Dir("~/src/www/ifs")))
	if err != nil {
		log.Printf("error running docs webserver: %v", err)
	}
	*/
	go manualGC()
	http.HandleFunc("/wrdr/upload", uploadSrvr)
	http.HandleFunc("/wrdr/uploadChunk", uploadFileChunkSrvr)
	http.Handle("/wrdr/", http.StripPrefix("/wrdr/", http.FileServer(http.Dir("/Users/ironfort/src/www/wrdr"))))
	err := http.ListenAndServe(":8080", nil)
	log.Printf("%v", err)
}
